!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var i=e();for(var r in i)("object"==typeof exports?exports:t)[r]=i[r]}}(window,(function(){return function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([,function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=i(2),n=i(3),o=i(4),s=i(5);var c,l,a,h,u=new r.ParticleSystem;u=new r.ParticleSystem;!function(t,e){h&&(clearTimeout(h),a=!1),console.log("canvasName: ",t),c=document.getElementById(t),console.log(c,document.getElementById(t)),l=c.getContext("2d"),a=!0;var i=function(){e(),a&&(h=setTimeout(i,10))};i()}("basicParticleSystemCanvas",(function(){let t={position:new n.Vector2(200,200),velocity:(e=2*Math.random()*Math.PI,new n.Vector2(Math.cos(e),Math.sin(e))).multiply(100),life:1,color:s.Color.red,size:5};var e;u.emit(new o.Particle(t)),u.simulate(.01),null!=l&&l.clearRect(0,0,c.width,c.height),u.render(l)}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ParticleSystem=void 0;const r=i(3);e.ParticleSystem=class{constructor(){this.particles=[],this.effectors=[],console.log("new ParticleSystem"),this.gravity=new r.Vector2(0,100)}emit(t){this.particles.push(t)}simulate(t){this.aging(t),this.applyGravity(),this.applyEffectors(),this.kinematics(t)}render(t){for(var e in this.particles){var i=this.particles[e],r=1-i.config.age/i.config.life;t.fillStyle="rgba("+Math.floor(255*i.config.color.r)+","+Math.floor(255*i.config.color.g)+","+Math.floor(255*i.config.color.b)+","+r.toFixed(2)+")",t.beginPath(),t.arc(i.config.position.x,i.config.position.y,i.config.size,0,2*Math.PI,!0),t.closePath(),t.fill()}}aging(t){for(var e=0;e<this.particles.length;){var i=this.particles[e];i.config.age+=t,i.config.age>=i.config.life?this.kill(e):e++}}kill(t){this.particles.length>1&&(this.particles[t]=this.particles[this.particles.length-1]),this.particles.pop()}applyGravity(){for(var t in this.particles)this.particles[t].config.acceleration=this.gravity}applyEffectors(){for(var t in this.effectors){var e=this.effectors[t].applys;for(var i in this.particles)e(this.particles[i])}}kinematics(t){for(var e in this.particles){var i=this.particles[e];i.config.position=i.config.position.add(i.config.velocity.multiply(t)),i.config.velocity=i.config.velocity.add(i.config.acceleration.multiply(t))}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Vector2=void 0;class r{constructor(t,e){this.x=t,this.y=e}euLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}sqrLength(){return this.x*this.x+this.y*this.y}copy(){return new r(this.x,this.y)}normalize(){const t=1/this.euLength();return new r(this.x*t,this.y*t)}add(t){return new r(this.x+t.x,this.y+t.y)}subtract(t){return new r(this.x-t.x,this.y-t.y)}multiply(t){return new r(this.x*t,this.y*t)}divide(t){const e=1/t;return new r(this.x*e,this.y*e)}dot(t){return this.x*t.x+this.y*t.y}zero(){return new r(0,0)}}e.Vector2=r,r.zero=new r(0,0)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Particle=void 0;const r=i(3);e.Particle=class{constructor(t){this.config=t,this.config.age=0,this.config.acceleration=r.Vector2.zero}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Color=void 0;class r{constructor(t,e,i){this.r=t,this.g=e,this.b=i}copy(){return new r(this.r,this.g,this.b)}add(t){return new r(this.r+t.r,this.g+t.g,this.b+t.b)}multiply(t){return new r(this.r*t,this.g*t,this.b*t)}modulate(t){return new r(this.r*t.r,this.g*t.g,this.b*t.b)}saturate(){this.r=Math.min(this.r,1),this.g=Math.min(this.g,1),this.b=Math.min(this.b,1)}}e.Color=r,r.black=new r(0,0,0),r.white=new r(1,1,1),r.red=new r(1,0,0),r.green=new r(0,1,0),r.blue=new r(0,0,1),r.yellow=new r(1,1,0),r.cyan=new r(0,1,1),r.purple=new r(1,0,1)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,